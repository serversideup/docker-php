on:
  workflow_call:
    inputs:
      tag-prefix:
        required: true
        type: string
        default: 'edge-'
      checkout-type:
        required: true
        type: string
      php-versions-file:
        type: string
        default: 'scripts/conf/php-versions.yml'
      default-base-os:
        type: string
        default: 'bookworm'
      docker-repository-prefix:
        type: string
        default: 'serversideup/php-pro-'
env:
  YQ_VERSION: "4.35.2"
  JQ_VERSION: "1.7"   

jobs:
  setup-matrix:
    runs-on: ubuntu-22.04
    outputs:
      php-variations: '["cli","fpm","fpm-nginx","fpm-apache","nginx-unit"]'
      base-os-versions: '["bookworm","alpine"]'
      php-versions-json: ${{ steps.get-php-versions.outputs.php-versions-json }}
    steps:
    - name: Check out code
      uses: actions/checkout@v3
    
    - name: Prepare PHP versions for the matrix. ðŸ˜Ž
      run: |
        chmod +x ./scripts/get-php-versions.sh
        ./scripts/get-php-versions.sh
    
    - name: Ensure our PHP Versions file exists.
      run: |
        if [ ! -f "${{ inputs.php-versions-file }}" ]; then
          echo "PHP Versions file does not exist. Exiting."
          exit 1
        else
          cat ${{ inputs.php-versions-file }}
        fi

    - name: Assemble PHP versions into the matrix. ðŸ˜Ž
      id: get-php-versions
      run: |
        PHP_VERSIONS_JSON=$(yq -o=json ${{ inputs.php-versions-file }} | jq -c '[.php_versions[] | .minor_versions[] | .patch_versions[]] | sort_by(split(".") | map(tonumber)) | reverse')
        echo "php-versions-json=${PHP_VERSIONS_JSON}" >> $GITHUB_OUTPUT
  

  docker-publish:
    needs: setup-matrix
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        base-os-versions: ${{fromJson(needs.setup-matrix.outputs.base-os-versions)}}
        php-variations: ${{fromJson(needs.setup-matrix.outputs.php-variations)}}
        php-versions: ${{ fromJson(needs.setup-matrix.outputs.php-versions-json) }}
    steps:
      ##
      # Checkout branch (for push deployments)
      ##
      - name: Get branch name
        if: inputs.checkout-type == 'branch'
        id: branch-name
        uses: tj-actions/branch-names@v6

      - uses: actions/checkout@v3
        if: inputs.checkout-type  == 'branch'
        with:
          ref: ${{ steps.branch-name.outputs.current_branch }}
      
      ##
      # Checkout latest stable release (for production releases)
      ##
      - name: Get latest stable release
        if: inputs.checkout-type  == 'latest-stable'
        id: latest-stable-version
        run: |
          echo "LATEST_STABLE_VERSION=$(curl --silent --header "Accept: application/vnd.github.v3.sha" "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')" >> $GITHUB_OUTPUT

      - name: Confirm release tag
        if: inputs.checkout-type  == 'latest-stable'
        run: |
          echo "Latest Stable Release Tag: ${{ steps.latest-stable-version.outputs.LATEST_STABLE_VERSION }}"
        
      - name: Checkout latest stable tag
        if: inputs.checkout-type  == 'latest-stable'
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.latest-stable-version.outputs.LATEST_STABLE_VERSION }}

      ##
      # Docker build & publish
      ##
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: "ðŸ“¦ Assemble the Docker Tags"
        run: |
          chmod +x ./scripts/assemble-docker-tags.sh
          ./scripts/assemble-docker-tags.sh
        env:
          DOCKER_REPOSITORY: ${{ matrix.docker-repository-prefix}}-${{ matrix.php-variations }}
          PHP_VERSIONS_FILE_RELATIVE_LOCATION: ${{ inputs.php-versions-file }}
          DEFAULT_BASE_OS: ${{ inputs.default-base-os }}
          PHP_BUILD_VERSION: ${{ matrix.php-versions }}
          PHP_BUILD_VARIATION: ${{ matrix.php-variations }}
          PHP_BUILD_BASE_OS: ${{ matrix.base-os-versions }}
          CHECKOUT_TYPE: ${{ inputs.checkout-type }}
          DOCKER_TAG_PREFIX: ${{ inputs.tag-prefix }}

  #     - name: Build and push
  #       uses: docker/build-push-action@v3
  #       with:
  #         file: src/variations/${{ matrix.php-variations }}/Dockerfile
  #         build-args: |
  #           BASE_OS_VERSION=${{ matrix.base-os-versions }}
  #           PHP_VERSION=${{ matrix.php-versions }}
  #           PHP_VARIATION=${{ matrix.php-variations }}
  #         context: src/${{ matrix.php-variations }}/.
  #         platforms: |
  #           linux/amd64
  #           linux/arm/v7
  #           linux/arm64/v8
  #         pull: true
  #         push: true
  #         tags: ${{ env.DOCKER_TAGS }}

  # update_container_readme:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       php-variations: ${{fromJson(needs.setup-matrix.outputs.php-variations)}}
  #   name: Push README to Docker Hub
  #   steps:
  #     - name: git checkout
  #       uses: actions/checkout@v3
  #       with:
  #         ref: main

  #     - name: push README to Dockerhub
  #       uses: peter-evans/dockerhub-description@v3
  #       with:
  #         username: ${{ secrets.DOCKER_HUB_README_USERNAME }}
  #         password: ${{ secrets.DOCKER_HUB_README_PASSWORD }}
  #         repository: serversideup/php-pro-${{ matrix.php-variations }}
  #         short-description: ${{ github.event.repository.description }}