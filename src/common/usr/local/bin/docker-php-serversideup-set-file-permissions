#!/bin/sh
set -eu

###################################################
# Usage: docker-php-serversideup-set-file-permissions --owner USER:GROUP [--service SERVICE] [--dir PATH]...
###################################################
# This script is intended to be called on build for sysadmins who want to
# change the UID and GID of a specific user. This is useful for when you
# want to match the UID and GID of the host machine to the container.
# Specifically, this can be helpful to call during a build target in development
# so developers don't need to worry about permissions issues.
script_name="docker-php-serversideup-set-file-permissions"

############################
# Functions
############################
usage() {
    echo "Usage: $0 --owner USER:GROUP [--service SERVICE] [--dir PATH]..."
    echo ""
    echo "Options:"
    echo "  --owner USER:GROUP    Set the owner (required)"
    echo "  --service SERVICE     Specify service type (optional, auto-detected if not provided)"
    echo "                        Valid services: cli, fpm, apache, fpm-apache, nginx, fpm-nginx, unit, frankenphp"
    echo "  --dir PATH            Additional directory to change ownership (can be used multiple times)"
}

detect_service() {
    # Detection priority order (most specific to least specific):
    
    # Check for FrankenPHP (binary in path)
    if command -v frankenphp >/dev/null 2>&1; then
        echo "frankenphp"
        return 0
    fi
    
    # Check for NGINX Unit
    if [ -d "/etc/unit" ] || command -v unitd >/dev/null 2>&1; then
        echo "unit"
        return 0
    fi
    
    # Check for Apache (with PHP-FPM config indicates fpm-apache)
    if command -v apache2 >/dev/null 2>&1 || command -v httpd >/dev/null 2>&1; then
        if [ -f "/usr/local/etc/php-fpm.conf" ] || command -v php-fpm >/dev/null 2>&1; then
            echo "fpm-apache"
            return 0
        else
            echo "apache"
            return 0
        fi
    fi
    
    # Check for Nginx (with PHP-FPM config indicates fpm-nginx)
    if [ -d "/etc/nginx" ] || command -v nginx >/dev/null 2>&1; then
        if [ -f "/usr/local/etc/php-fpm.conf" ] || command -v php-fpm >/dev/null 2>&1; then
            echo "fpm-nginx"
            return 0
        else
            echo "nginx"
            return 0
        fi
    fi
    
    # Check for standalone PHP-FPM
    if [ -f "/usr/local/etc/php-fpm.conf" ] || command -v php-fpm >/dev/null 2>&1; then
        echo "fpm"
        return 0
    fi
    
    # Default to CLI if nothing else is detected
    echo "cli"
    return 0
}

change_ownership() {
    for path in "$@"; do
        if [ -e "$path" ]; then
            chown -R "$OWNER" "$path"
            echo "$script_name: Ownership of $path changed to $OWNER."
        else
            echo "$script_name: Directory not found: $path"
            exit 1
        fi
    done
}

############################
# Initialize
############################

# Check for root privileges
if [ "$(id -u)" -ne 0 ]; then
    echo "${script_name}: This script must be run as root within the container. Be sure to set \"USER root\" in your Dockerfile before running this script."
    exit 1
fi

# Initialize variables to avoid unbound variable errors with 'set -u'
OWNER=""
SERVICE=""
EXTRA_DIRS=""

# Parse arguments
while [ "$#" -gt 0 ]; do
    case "$1" in
        --owner)
            OWNER="$2"
            shift 2
            ;;
        --owner=*)
            OWNER="${1#--owner=}"
            shift 1
            ;;
        --service)
            SERVICE="$2"
            shift 2
            ;;
        --service=*)
            SERVICE="${1#--service=}"
            shift 1
            ;;
        --dir)
            EXTRA_DIRS="$EXTRA_DIRS $2"
            shift 2
            ;;
        --dir=*)
            EXTRA_DIRS="$EXTRA_DIRS ${1#--dir=}"
            shift 1
            ;;
        *)
            usage
            ;;
    esac
done

# Ensure OWNER is set
if [ -z "$OWNER" ]; then
    usage
    exit 1
fi

# Auto-detect service if not provided
if [ -z "$SERVICE" ]; then
    SERVICE=$(detect_service)
    echo "$script_name: Auto-detected service: $SERVICE"
fi

# Detect the operating system using /etc/os-release
if [ -f "/etc/os-release" ]; then
    . /etc/os-release
    OS="$ID"
else
    echo "$script_name: Cannot determine the operating system."
    exit 1
fi

# Determine directories based on OS and SERVICE
case "$OS" in
    debian)
        case "$SERVICE" in
            cli)
                DIRS="
                    /composer
                    /var/www
                    $PHP_INI_DIR/conf.d/zzz-serversideup-docker-php-debug.ini"
                ;;
            fpm)
                DIRS="
                    /composer
                    /usr/local/etc/php-fpm.conf
                    /usr/local/etc/php-fpm.d/zzz-docker-php-serversideup-fpm-debug.conf
                    /var/www
                    $PHP_INI_DIR/conf.d/zzz-serversideup-docker-php-debug.ini"
                ;;
            apache | fpm-apache)
                DIRS="
                    /composer
                    /etc/apache2
                    /etc/ssl/private
                    /run
                    /usr/local/etc/php-fpm.conf
                    /usr/local/etc/php-fpm.d/zzz-docker-php-serversideup-fpm-debug.conf
                    /var/log/apache2
                    /var/www
                    $PHP_INI_DIR/conf.d/zzz-serversideup-docker-php-debug.ini"
                ;;
            nginx | fpm-nginx)
                DIRS="
                    /composer
                    /etc/nginx
                    /etc/ssl/private
                    /run
                    /usr/local/etc/php-fpm.conf
                    /usr/local/etc/php-fpm.d/zzz-docker-php-serversideup-fpm-debug.conf
                    /var/cache/nginx
                    /var/log/nginx
                    /var/www
                    $PHP_INI_DIR/conf.d/zzz-serversideup-docker-php-debug.ini"
                ;;
            unit)
                DIRS="
                    /composer
                    /etc/unit
                    /etc/ssl/private
                    /var/lib/unit
                    /var/log/unit
                    /var/run/unit
                    /var/www
                    $PHP_INI_DIR/conf.d/zzz-serversideup-docker-php-debug.ini"
                ;;
            frankenphp)
                DIRS="
                    /composer
                    /var/www
                    /etc/ssl/private
                    $PHP_INI_DIR/conf.d/zzz-serversideup-docker-php-debug.ini"
                ;;
            *)
                echo "$script_name: Unsupported service: $SERVICE"
                exit 1
                ;;
        esac
        ;;
    alpine)
        case "$SERVICE" in
            cli)
                DIRS="
                    /composer
                    /var/www
                    $PHP_INI_DIR/conf.d/zzz-serversideup-docker-php-debug.ini"
                ;;
            fpm)
                DIRS="
                    /composer
                    /usr/local/etc/php-fpm.conf
                    /usr/local/etc/php-fpm.d/zzz-docker-php-serversideup-fpm-debug.conf
                    /var/www
                    $PHP_INI_DIR/conf.d/zzz-serversideup-docker-php-debug.ini"
                ;;
            apache | fpm-apache)
                DIRS="
                    /composer
                    /etc/apache2
                    /etc/ssl/private
                    /run
                    /usr/local/etc/php-fpm.conf
                    /usr/local/etc/php-fpm.d/zzz-docker-php-serversideup-fpm-debug.conf
                    /var/www
                    $PHP_INI_DIR/conf.d/zzz-serversideup-docker-php-debug.ini"
                ;;
            nginx | fpm-nginx)
                DIRS="
                    /composer
                    /etc/nginx/
                    /etc/ssl/private
                    /usr/local/etc/php-fpm.conf
                    /usr/local/etc/php-fpm.d/zzz-docker-php-serversideup-fpm-debug.conf
                    /var/cache/nginx
                    /var/log/nginx
                    /var/www/
                    $PHP_INI_DIR/conf.d/zzz-serversideup-docker-php-debug.ini"
                ;;
            unit)
                DIRS="
                    /composer
                    /etc/unit
                    /etc/ssl/private
                    /var/lib/unit
                    /var/log/unit
                    /var/run/unit
                    /var/www
                    $PHP_INI_DIR/conf.d/zzz-serversideup-docker-php-debug.ini"
                ;;
            frankenphp)
                DIRS="
                    /composer
                    /var/www
                    /etc/ssl/private
                    $PHP_INI_DIR/conf.d/zzz-serversideup-docker-php-debug.ini"
                ;;
            *)
                echo "$script_name: Unsupported SERVICE: $SERVICE"
                exit 1
                ;;
        esac
        ;;
    *)
        echo "$script_name: Unsupported operating system: $OS"
        exit 1
        ;;
esac

# Append any extra directories provided via --dir flags
if [ -n "$EXTRA_DIRS" ]; then
    DIRS="$DIRS $EXTRA_DIRS"
fi

# Change ownership of the directories
# shellcheck disable=SC2086
change_ownership $DIRS