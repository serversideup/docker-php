#!/bin/sh
set -eu

###################################################
# Usage: docker-php-serversideup-set-file-permissions --owner USER:GROUP --service SERVICE
###################################################
# This script is intended to be called on build for sysadmins who want to
# change the UID and GID of a specific user. This is useful for when you
# want to match the UID and GID of the host machine to the container.
# Specifically, this can be helpful to call during a build target in development
# so developers don't need to worry about permissions issues.
script_name="docker-php-serversideup-set-file-permissions"

# Usage function
usage() {
    echo "Usage: $0 --owner USER:GROUP --service SERVICE"
    exit 1
}

# Check for minimum number of arguments
if [ "$#" -ne 4 ]; then
    usage
fi

# Parse arguments
while [ "$#" -gt 0 ]; do
    case "$1" in
        --owner)
            OWNER="$2"
            shift 2
            ;;
        --service)
            SERVICE="$2"
            shift 2
            ;;
        *)
            usage
            ;;
    esac
done

# Ensure OWNER and SERVICE are set
if [ -z "$OWNER" ] || [ -z "$SERVICE" ]; then
    usage
fi

# Check for root privileges
if [ "$(id -u)" -ne 0 ]; then
    echo "${script_name}: This script must be run as root within the container. Be sure to set \"USER root\" in your Dockerfile before running this script."
    exit 1
fi

# Detect the operating system using /etc/os-release
if [ -f "/etc/os-release" ]; then
    . /etc/os-release
    OS="$ID"
else
    echo "$script_name: Cannot determine the operating system."
    exit 1
fi

change_ownership() {
    for path in "$@"; do
        if [ -e "$path" ]; then
            chown -R "$OWNER" "$path"
            echo "$script_name: Ownership of $path changed to $OWNER."
        else
            echo "$script_name: Directory not found: $path"
            exit 1
        fi
    done
}

# Determine directories based on OS and SERVICE
case "$OS" in
    debian)
        case "$SERVICE" in
            cli)
                DIRS="
                    /composer
                    /var/www
                    $PHP_INI_DIR/conf.d/zzz-serversideup-docker-php-debug.ini"
                ;;
            fpm)
                DIRS="
                    /composer
                    /var/www
                    /usr/local/etc/php-fpm.conf
                    /usr/local/etc/php-fpm.d/zzz-docker-php-serversideup-fpm-debug.conf
                    $PHP_INI_DIR/conf.d/zzz-serversideup-docker-php-debug.ini"
                ;;
            apache)
                DIRS="
                    /composer
                    /run
                    /var/www
                    /var/log/apache2
                    /etc/apache2
                    /etc/ssl/private
                    /usr/local/etc/php-fpm.conf
                    /usr/local/etc/php-fpm.d/zzz-docker-php-serversideup-fpm-debug.conf
                    $PHP_INI_DIR/conf.d/zzz-serversideup-docker-php-debug.ini"
                ;;
            nginx)
                DIRS="
                    /composer
                    /run
                    /var/www
                    /var/log/nginx
                    /var/cache/nginx
                    /etc/nginx
                    /etc/ssl/private
                    /usr/local/etc/php-fpm.conf
                    /usr/local/etc/php-fpm.d/zzz-docker-php-serversideup-fpm-debug.conf
                    $PHP_INI_DIR/conf.d/zzz-serversideup-docker-php-debug.ini"
                ;;
            unit)
                DIRS="
                    /composer
                    /var/www
                    /var/log/unit
                    /var/run/unit
                    /var/lib/unit
                    /etc/unit
                    /etc/ssl/private
                    $PHP_INI_DIR/conf.d/zzz-serversideup-docker-php-debug.ini"
                ;;
            *)
                echo "$script_name: Unsupported service: $SERVICE"
                exit 1
                ;;
        esac
        ;;
    alpine)
        case "$SERVICE" in
            cli)
                DIRS="
                    /composer
                    /var/www
                    $PHP_INI_DIR/conf.d/zzz-serversideup-docker-php-debug.ini"
                ;;
            fpm)
                DIRS="
                    /composer
                    /var/www
                    /usr/local/etc/php-fpm.conf
                    /usr/local/etc/php-fpm.d/zzz-docker-php-serversideup-fpm-debug.conf
                    $PHP_INI_DIR/conf.d/zzz-serversideup-docker-php-debug.ini"
                ;;
            apache)
                DIRS="
                    /composer
                    /var/www
                    /etc/apache2
                    /etc/ssl/private
                    /usr/local/etc/php-fpm.conf
                    /usr/local/etc/php-fpm.d/zzz-docker-php-serversideup-fpm-debug.conf
                    $PHP_INI_DIR/conf.d/zzz-serversideup-docker-php-debug.ini"
                ;;
            nginx)
                DIRS="
                    /composer
                    /var/www
                    /etc/nginx
                    /var/log/nginx
                    /var/lib/nginx
                    /etc/ssl/private
                    /usr/local/etc/php-fpm.conf
                    /usr/local/etc/php-fpm.d/zzz-docker-php-serversideup-fpm-debug.conf
                    $PHP_INI_DIR/conf.d/zzz-serversideup-docker-php-debug.ini"
                ;;
            *)
                echo "$script_name: Unsupported SERVICE: $SERVICE"
                exit 1
                ;;
        esac
        ;;
    *)
        echo "$script_name: Unsupported operating system: $OS"
        exit 1
        ;;
esac

# Change ownership of the directories
# Split DIRS into an array and properly quote each path
for dir in ${DIRS}; do
    if [ -e "${dir}" ]; then
        chown -R "${OWNER}" "${dir}" || {
            echo "${script_name}: Failed to change ownership of ${dir}"
            exit 1
        }
        echo "${script_name}: Ownership of ${dir} changed to ${OWNER}."
    else
        echo "${script_name}: Directory not found: ${dir}"
        exit 1
    fi
done